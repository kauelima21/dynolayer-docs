{
  "version": 3,
  "sources": ["src/app/pages/documentation/retrieving-data/retrieving-data.component.ts", "src/app/pages/documentation/retrieving-data/retrieving-data.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { CodeBlockComponent } from '../../../components/code-block/code-block.component';\n\n@Component({\n  selector: 'app-retrieving-data',\n  imports: [CodeBlockComponent],\n  templateUrl: './retrieving-data.component.html',\n  styleUrl: './retrieving-data.component.css'\n})\nexport class RetrievingDataComponent {\n  allMethodExample = `\n    users = User.all()\n\n    print(users) # [{\"id\": 1, \"first_name\": \"John\"}, ...]\n  `;\n\n  findMethodExample = `\n    user = User.find({\"id\": 1})\n\n    print(isinstance(user, User)) # True\n  `;\n\n  queryBuilder = `\n    users = User.where(\"status\", \"active\").and_where(\"email\", \"begins_with\", \"contact\").fetch()\n\n    print(users) # [{\"id\": 1, \"first_name\": \"John\"}, ...]\n  `;\n\n  queryBuilderIndex = `\n    users = User.where(\"role\", \"admin\").and_where(\"email\", \"begins_with\", \"contact\").index(\"role-email-index\").fetch()\n\n    print(users) # [{\"id\": 1, \"first_name\": \"John\"}, ...]\n  `;\n\n}\n", "<section class=\"flex flex-col gap-5 mb-6 text-zinc-800\">\n  <h2 class=\"font-semibold text-2xl\">Introdução</h2>\n  <p>\n    Existem algumas formas de realizar consultas com o DynoLayer, onde, dependendo do\n    caso de uso, será aplicado uma operação de <b>query</b> ou <b>scan</b> contra a tabela.\n  </p>\n  <p>Abaixo, haverão exemplos de como implementar ambos os casos.</p>\n\n  <h2 class=\"font-semibold text-2xl\">Resgatando todos o itens da tabela</h2>\n  <p>\n    Para realizar um \"full scan\", usa-se o método <b>all</b>, que realizará uma operação de scan\n    paginando todos os registros e retornando uma lista de dicionários.\n  </p>\n  <app-code-block [code]=\"allMethodExample\" />\n\n  <h2 class=\"font-semibold text-2xl\">Realizando busca por chave primária</h2>\n  <p>\n    Para resgatar um registro através de sua chave primária (simples ou composta),\n    usa-se o método <b>find</b>, o qual retorna uma nova instância da model com os dados resgatados.\n  </p>\n  <app-code-block [code]=\"findMethodExample\" />\n\n  <h2 class=\"font-semibold text-2xl\">Buscando com filtros</h2>\n  <p>\n    Para realizar operações de filtro, usa-se o método <b>where</b>, com o qual é possível\n    construir um query builder encadeando métodos.\n  </p>\n  <p>\n    Ao final, deve-se especificar o método <b>fetch</b> para queries ou p <b>get</b> para scans.<br />\n    Caso os campos usados nos filtros não façam parte de nenhuma chave, o método chamado será o get.\n  </p>\n  <app-code-block [code]=\"queryBuilder\" />\n  <p>Também é possível indicar qual o index que deve ser usado na que ry:</p>\n  <app-code-block [code]=\"queryBuilderIndex\" />\n  <div>\n    Outros métodos aceitos no query builder:\n    <ul class=\"list-disc pl-6\">\n      <li>or_where</li>\n      <li>where_not</li>\n      <li>or_where_not</li>\n      <li>where_in</li>\n      <li>where_between</li>\n      <li>limit</li>\n      <li>attributes_to_get</li>\n    </ul>\n  </div>\n</section>\n"],
  "mappings": "6JASA,IAAaA,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CAClCC,iBAAmB;;;;IAMnBC,kBAAoB;;;;IAMpBC,aAAe;;;;IAMfC,kBAAoB;;;;+CAnBTJ,EAAuB,2BAAvBA,EAAuBK,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,OAAA,WAAA,QAAA,OAAA,eAAA,EAAA,CAAA,EAAA,gBAAA,UAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICTpCE,EAAA,EAAA,UAAA,CAAA,EAAwD,EAAA,KAAA,CAAA,EACnBC,EAAA,EAAA,kBAAA,EAAUC,EAAA,EAC7CF,EAAA,EAAA,GAAA,EACEC,EAAA,EAAA,yIAAA,EAC2CD,EAAA,EAAA,GAAA,EAAGC,EAAA,EAAA,OAAA,EAAKC,EAAA,EAAKD,EAAA,EAAA,MAAA,EAAGD,EAAA,EAAA,GAAA,EAAGC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAKD,EAAA,GAAA,oBAAA,EACzEC,EAAA,EACAF,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,iEAAA,EAA4DC,EAAA,EAE/DF,EAAA,GAAA,KAAA,CAAA,EAAmCC,EAAA,GAAA,oCAAA,EAAkCC,EAAA,EACrEF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,oDAAA,EAA8CD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,KAAA,EAAGC,EAAA,EAAID,EAAA,GAAA,uHAAA,EAE1DC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EAEAH,EAAA,GAAA,KAAA,CAAA,EAAmCC,EAAA,GAAA,wCAAA,EAAmCC,EAAA,EACtEF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,2GAAA,EACgBD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,MAAA,EAAIC,EAAA,EAAID,EAAA,GAAA,2EAAA,EAC7BC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EAEAH,EAAA,GAAA,KAAA,CAAA,EAAmCC,EAAA,GAAA,sBAAA,EAAoBC,EAAA,EACvDF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,+DAAA,EAAmDD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,OAAA,EAAKC,EAAA,EAAID,EAAA,GAAA,kFAAA,EAEjEC,EAAA,EACAF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,6CAAA,EAAuCD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,OAAA,EAAKC,EAAA,EAAKD,EAAA,GAAA,qBAAA,EAAkBD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,KAAA,EAAGC,EAAA,EAAKD,EAAA,GAAA,cAAA,EAAWE,EAAA,GAAA,IAAA,EAC5FF,EAAA,GAAA,gHAAA,EACFC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EACAH,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,+EAAA,EAAoEC,EAAA,EACvEC,EAAA,GAAA,iBAAA,CAAA,EACAH,EAAA,GAAA,KAAA,EACEC,EAAA,GAAA,+CAAA,EACAD,EAAA,GAAA,KAAA,CAAA,EAA2B,GAAA,IAAA,EACrBC,EAAA,GAAA,UAAA,EAAQC,EAAA,EACZF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,WAAA,EAASC,EAAA,EACbF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,cAAA,EAAYC,EAAA,EAChBF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,UAAA,EAAQC,EAAA,EACZF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,eAAA,EAAaC,EAAA,EACjBF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,OAAA,EAAKC,EAAA,EACTF,EAAA,GAAA,IAAA,EAAIC,EAAA,GAAA,mBAAA,EAAiBC,EAAA,EAAK,EACvB,EACD,SAhCUE,EAAA,EAAA,EAAAC,EAAA,OAAAN,EAAAV,gBAAA,EAOAe,EAAA,CAAA,EAAAC,EAAA,OAAAN,EAAAT,iBAAA,EAWAc,EAAA,EAAA,EAAAC,EAAA,OAAAN,EAAAR,YAAA,EAEAa,EAAA,CAAA,EAAAC,EAAA,OAAAN,EAAAP,iBAAA,kBD5BNc,CAAkB,EAAAC,cAAA,CAAA,CAAA,SAIjBnB,CAAuB,GAAA",
  "names": ["RetrievingDataComponent", "allMethodExample", "findMethodExample", "queryBuilder", "queryBuilderIndex", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "CodeBlockComponent", "encapsulation"]
}
