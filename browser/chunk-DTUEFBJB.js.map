{
  "version": 3,
  "sources": ["src/app/pages/documentation/persisting-data/persisting-data.component.ts", "src/app/pages/documentation/persisting-data/persisting-data.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { CodeBlockComponent } from '../../../components/code-block/code-block.component';\n\n@Component({\n  selector: 'app-persisting-data',\n  imports: [CodeBlockComponent],\n  templateUrl: './persisting-data.component.html',\n  styleUrl: './persisting-data.component.css'\n})\nexport class PersistingDataComponent {\n  createMethodCode = `\n    class User(DynoLayer):\n      def __init__(self):\n          super().__init__(\n              entity=\"users\",\n              fillable=[\"id\", \"first_name\", \"last_name\"]\n          )\n\n    # atributo 'email' será ignorado\n    user_input = {\"id\": 1, \"first_name\": \"John\", \"last_name\": \"Doe\", \"email\": \"john@mail.com\"}\n    User.create(user_input)\n  `;\n\n  saveMethodCode = `\n    user = User()\n    user.id = 999 # o id não existe na tabela\n    user.first_name = \"Jane\"\n\n    user.save() # insere o novo item\n  `;\n\n  updateExample = `\n    user = User()\n    user.id = 1 # usuário existente na tabela\n    user.first_name = \"Jane\"\n\n    user.save() # atualiza o campo 'first_name' do registro\n  `;\n}\n", "<section class=\"flex flex-col gap-5 mb-6 text-zinc-800\">\n  <h2 class=\"font-semibold text-2xl\">Introdução</h2>\n  <p>\n    No DynoLayer, é possível persistir dados de duas formas: fazendo um <b>create</b> ou um <b>save</b>.\n  </p>\n  <p>Abaixo, haverão exemplos de como implementar ambos os casos.</p>\n\n  <h2 class=\"font-semibold text-2xl\">Salvando registros</h2>\n  <p>\n    A primeira forma de persistência é usando o <b>create</b>. Para isso, é necessário antes\n    que hajam propriedades declaradas no atributo <b>fillable</b>. Uma vez que estas\n    tenham sido indicadas, basta acionar o método passando um dicionário que as contenha.\n    O DynoLayer filtrará pelos campos declarados e realizará o cadastro do registro.\n  </p>\n  <app-code-block [code]=\"createMethodCode\" />\n  <p>\n    A segunda forma é usando o <b>save</b>, que também é usada para atualizar registros.\n    Ou seja, caso o registro não exista com a chave primária indicada, o DynamoDB irá inserir um novo item na tabela.\n  </p>\n  <app-code-block [code]=\"saveMethodCode\" />\n\n  <h2 class=\"font-semibold text-2xl\">Atualizando registros</h2>\n  <p>\n    Conforme o exemplo anterior, o método <b>save</b> também é utilizado para atualizar registros em uma tabela.\n    Desse modo, ao utilizar o save em um item que já existe, a operação apenas atualizará os campos passados.\n  </p>\n  <app-code-block [code]=\"updateExample\" />\n</section>\n"],
  "mappings": "6JASA,IAAaA,GAAuB,IAAA,CAA9B,MAAOA,CAAuB,CAClCC,iBAAmB;;;;;;;;;;;IAanBC,eAAiB;;;;;;IAQjBC,cAAgB;;;;;;+CAtBLH,EAAuB,2BAAvBA,EAAuBI,UAAA,CAAA,CAAA,qBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,OAAA,WAAA,QAAA,OAAA,eAAA,EAAA,CAAA,EAAA,gBAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,ICTpCE,EAAA,EAAA,UAAA,CAAA,EAAwD,EAAA,KAAA,CAAA,EACnBC,EAAA,EAAA,kBAAA,EAAUC,EAAA,EAC7CF,EAAA,EAAA,GAAA,EACEC,EAAA,EAAA,6EAAA,EAAoED,EAAA,EAAA,GAAA,EAAGC,EAAA,EAAA,QAAA,EAAMC,EAAA,EAAKD,EAAA,EAAA,SAAA,EAAMD,EAAA,EAAA,GAAA,EAAGC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAID,EAAA,GAAA,IAAA,EACrGC,EAAA,EACAF,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,iEAAA,EAA4DC,EAAA,EAE/DF,EAAA,GAAA,KAAA,CAAA,EAAmCC,EAAA,GAAA,oBAAA,EAAkBC,EAAA,EACrDF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,qDAAA,EAA4CD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,QAAA,EAAMC,EAAA,EAAID,EAAA,GAAA,sFAAA,EACXD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,UAAA,EAAQC,EAAA,EAAID,EAAA,GAAA,yMAAA,EAG/DC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EACAH,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,iCAAA,EAA2BD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,MAAA,EAAIC,EAAA,EAAID,EAAA,GAAA,kLAAA,EAExCC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EAEAH,EAAA,GAAA,KAAA,CAAA,EAAmCC,EAAA,GAAA,uBAAA,EAAqBC,EAAA,EACxDF,EAAA,GAAA,GAAA,EACEC,EAAA,GAAA,4CAAA,EAAsCD,EAAA,GAAA,GAAA,EAAGC,EAAA,GAAA,MAAA,EAAIC,EAAA,EAAKD,EAAA,GAAA,0LAAA,EAEpDC,EAAA,EACAC,EAAA,GAAA,iBAAA,CAAA,EACFD,EAAA,SAbkBE,EAAA,EAAA,EAAAC,EAAA,OAAAN,EAAAT,gBAAA,EAKAc,EAAA,CAAA,EAAAC,EAAA,OAAAN,EAAAR,cAAA,EAOAa,EAAA,CAAA,EAAAC,EAAA,OAAAN,EAAAP,aAAA,kBDrBNc,CAAkB,EAAAC,cAAA,CAAA,CAAA,SAIjBlB,CAAuB,GAAA",
  "names": ["PersistingDataComponent", "createMethodCode", "saveMethodCode", "updateExample", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "CodeBlockComponent", "encapsulation"]
}
